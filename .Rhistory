"HiNeuAngryNo", "HiEmoAngryNo",
"HiNeuHappyNo", "HiEmoHappyNo"),
MT.data$data$mem.cor, ""))
### Create column to average for each face ###
MT.data$data$mem.cor.yes <- ifelse(MT.data$data$cond.correct == "Yes", MT.data$data$mem.cor, NA)
MT.data$data$mem.cor.no <- ifelse(MT.data$data$cond.correct == "No", MT.data$data$mem.cor, NA)
MT.data$data$mem.cor.yes <- as.numeric(MT.data$data$mem.cor.yes)
MT.data$data$mem.cor.no <- as.numeric(MT.data$data$mem.cor.no)
### Create informative condition variables (i.e., angry, happy, sur-neg, sur-pos, etc.) ###
MT.data$data$condition.rating <- ifelse(MT.data$data$cond.correct == "Angry",
ifelse(MT.data$data$rate == 1, "Angry", NA),
ifelse(MT.data$data$cond.correct == "Happy",
ifelse(MT.data$data$rate == 0, "Happy", NA),
ifelse(MT.data$data$cond.correct == "Surprise",
ifelse(MT.data$data$rate == 1, "Sur.Neg", "Sur.Pos"), NA)))
### label load, face, and ratings together ###
MT.data$data$cond.full <- paste(MT.data$data$cond.load, MT.data$data$condition.rating)
## there are no factors b/w memory trials.. while I did not randomize correctly,
## let's look to see if there's some interesting relationships. Starting by
## categorizing memory trials...
MT.data$data$memtype <- paste(MT.data$data$load,MT.data$data$type)
MT.data$data$memtype <- ifelse(MT.data$data$trialtype == "memory",
MT.data$data$memtype, "")
### make subj factor ###
MT.data$data$subjID <- factor(MT.data$data$subjID)
### add RT z scores ###
MT.data$data$RTz <- ave(MT.data$data$RT, MT.data$data$subjID, FUN=scale)
### factor ###
MT.data$data$factor <- paste(MT.data$data$type, MT.data$data$load)
}
###  MT Measures ###
{### get derivatives ###
MT.data <- mt_derivatives(MT.data)
### Flip traSurp.Negectories ###
MT.data <- mt_remap_symmetric(MT.data)
### adSurp.Negust to identical start/end traSurp.Negectories ###
MT.data <- mt_align_start_end(MT.data)
### normalize, there's some issues w/ trials w/ 0 variability: hence this weird bit ###
#MT.data$data$pos_var <- apply(MT.data$trajectories[,,"xpos"],1,var,na.rm=TRUE) + apply(MT.data$trajectories[,,"ypos"],1,var,na.rm=TRUE)
#table(MT.data$data$pos_var==0)
#MT.data <- mt_subset(MT.data, pos_var>0)
MT.data <- mt_time_normalize(MT.data)
### add measures ###
MT.data <- mt_measures(MT.data)
}}
### check RT min / max for outliers ###
meanrt <- mean(MT.data$data$RT[which(MT.data$data$trialtype == "face")])
sdrt <- sd(MT.data$data$RT[which(MT.data$data$trialtype == "face")])
outlier <- meanrt + (3*sdrt)
### remove trials > outlierRT ###
MT.data$data <-MT.data$data[!(MT.data$data$RT>=outlier),]
### flag trials before incorrect memory probes ###
for(i in 2:nrow(MT.data$data)) {
MT.data$data$flag[i-1] <- ifelse(MT.data$data$mem.cor[i] == 0, 0, 1)
}
### remove flagged trials ###
MT.data$data <- subset(MT.data$data, MT.data$data$flag == 1)
# Merge measures with trial data
MT.results2 <- dplyr::inner_join(
MT.data$data, MT.data$measures,
by="mt_id")
### is surprise ratings different from low vs high trials? ###
MT.data.rating.table2 <- (ddply(MT.results2, "subjID", summarise,
lo.emo.ang_rate = mean(rate[which(cond.correct == "Angry" & type == "EMO" & load == "LOW" & trialtype == "face")], na.rm = TRUE),
hi.emo.ang_rate = mean(rate[which(cond.correct == "Angry" & type == "EMO" & load == "HIGH" & trialtype == "face")], na.rm = TRUE),
lo.neu.ang_rate = mean(rate[which(cond.correct == "Angry" & type == "NEU" & load == "LOW" & trialtype == "face")], na.rm = TRUE),
hi.neu.ang_rate = mean(rate[which(cond.correct == "Angry" & type == "NEU" & load == "HIGH" & trialtype == "face")], na.rm = TRUE),
lo.emo.hap_rate = mean(rate[which(cond.correct == "Happy" & type == "EMO" & load == "LOW" & trialtype == "face")], na.rm = TRUE),
hi.emo.hap_rate = mean(rate[which(cond.correct == "Happy" & type == "EMO" & load == "HIGH" & trialtype == "face")], na.rm = TRUE),
lo.neu.hap_rate = mean(rate[which(cond.correct == "Happy" & type == "NEU" & load == "LOW" & trialtype == "face")], na.rm = TRUE),
hi.neu.hap_rate = mean(rate[which(cond.correct == "Happy" & type == "NEU" & load == "HIGH" & trialtype == "face")], na.rm = TRUE),
lo.emo.sur_rate = mean(rate[which(cond.correct == "Surprise" & type == "EMO" & load == "LOW" & trialtype == "face")], na.rm = TRUE),
hi.emo.sur_rate = mean(rate[which(cond.correct == "Surprise" & type == "EMO" & load == "HIGH" & trialtype == "face")], na.rm = TRUE),
lo.neu.sur_rate = mean(rate[which(cond.correct == "Surprise" & type == "NEU" & load == "LOW" & trialtype == "face")], na.rm = TRUE),
hi.neu.sur_rate = mean(rate[which(cond.correct == "Surprise" & type == "NEU" & load == "HIGH" & trialtype == "face")], na.rm = TRUE),
lo.emo.ang_RT = mean(RT.x[which(cond.correct == "Angry" & type == "EMO" & load == "LOW" & trialtype == "face")], na.rm = TRUE),
hi.emo.ang_RT = mean(RT.x[which(cond.correct == "Angry" & type == "EMO" & load == "HIGH" & trialtype == "face")], na.rm = TRUE),
lo.neu.ang_RT = mean(RT.x[which(cond.correct == "Angry" & type == "NEU" & load == "LOW" & trialtype == "face")], na.rm = TRUE),
hi.neu.ang_RT = mean(RT.x[which(cond.correct == "Angry" & type == "NEU" & load == "HIGH" & trialtype == "face")], na.rm = TRUE),
lo.emo.hap_RT = mean(RT.x[which(cond.correct == "Happy" & type == "EMO" & load == "LOW" & trialtype == "face")], na.rm = TRUE),
hi.emo.hap_RT = mean(RT.x[which(cond.correct == "Happy" & type == "EMO" & load == "HIGH" & trialtype == "face")], na.rm = TRUE),
lo.neu.hap_RT = mean(RT.x[which(cond.correct == "Happy" & type == "NEU" & load == "LOW" & trialtype == "face")], na.rm = TRUE),
hi.neu.hap_RT = mean(RT.x[which(cond.correct == "Happy" & type == "NEU" & load == "HIGH" & trialtype == "face")], na.rm = TRUE),
lo.emo.sur_n_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "EMO" & load == "LOW" & trialtype == "face" & rate == 1)], na.rm = TRUE),
hi.emo.sur_n_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "EMO" & load == "HIGH" & trialtype == "face" & rate == 1)], na.rm = TRUE),
lo.neu.sur_n_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "NEU" & load == "LOW" & trialtype == "face" & rate == 1)], na.rm = TRUE),
hi.neu.sur_n_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "NEU" & load == "HIGH" & trialtype == "face" & rate == 1)], na.rm = TRUE),
lo.emo.sur_p_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "EMO" & load == "LOW" & trialtype == "face" & rate == 0)], na.rm = TRUE),
hi.emo.sur_p_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "EMO" & load == "HIGH" & trialtype == "face" & rate == 0)], na.rm = TRUE),
lo.neu.sur_p_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "NEU" & load == "LOW" & trialtype == "face" & rate == 0)], na.rm = TRUE),
hi.neu.sur_p_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "NEU" & load == "HIGH" & trialtype == "face" & rate == 0)], na.rm = TRUE),
lo.neu.sur_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "NEU" & load == "LOW" & trialtype == "face")], na.rm = TRUE),
hi.neu.sur_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "NEU" & load == "HIGH" & trialtype == "face")], na.rm = TRUE),
lo.emo.sur_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "EMO" & load == "LOW" & trialtype == "face")], na.rm = TRUE),
hi.emo.sur_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "EMO" & load == "HIGH" & trialtype == "face")], na.rm = TRUE),
lo.sur_RT = mean(RT.x[which(cond.correct == "Surprise" & load == "LOW" & trialtype == "face")], na.rm = TRUE),
hi.sur_RT = mean(RT.x[which(cond.correct == "Surprise" & load == "HIGH" & trialtype == "face")], na.rm = TRUE),
neu.sur_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "NEU" & trialtype == "face")], na.rm = TRUE),
emo.sur_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "EMO" & trialtype == "face")], na.rm = TRUE),
lo.sur_n_RT = mean(RT.x[which(cond.correct == "Surprise" & load == "LOW" & trialtype == "face" & rate == 1)], na.rm = TRUE),
hi.sur_n_RT = mean(RT.x[which(cond.correct == "Surprise" & load == "HIGH" & trialtype == "face" & rate == 1)], na.rm = TRUE),
neu.sur_n_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "NEU" & trialtype == "face" & rate == 1)], na.rm = TRUE),
emo.sur_n_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "EMO" & trialtype == "face" & rate ==1)], na.rm = TRUE),
lo.sur_p_RT = mean(RT.x[which(cond.correct == "Surprise" & load == "LOW" & trialtype == "face" & rate == 0)], na.rm = TRUE),
hi.sur_p_RT = mean(RT.x[which(cond.correct == "Surprise" & load == "HIGH" & trialtype == "face" & rate == 0)], na.rm = TRUE),
neu.sur_p_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "NEU" & trialtype == "face" & rate == 0)], na.rm = TRUE),
emo.sur_p_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "EMO" & trialtype == "face" & rate ==0)], na.rm = TRUE),
mem.cor.yes = mean(mem.cor.yes, na.rm = TRUE),
mem.cor.no = mean(mem.cor.no, na.rm = TRUE),
emo.mem = mean(emo.mem, na.rm = TRUE),
neu.mem = mean(neu.mem, na.rm = TRUE),
lo.mem = mean(lo.mem, na.rm = TRUE),
hi.mem = mean(hi.mem, na.rm = TRUE),
lo.emo.sur_MAD = mean(MAD[which(cond.load == "LoEmoSurprise")], na.rm = TRUE),
hi.emo.sur_MAD = mean(MAD[which(cond.load == "HiEmoSurprise")], na.rm = TRUE),
lo.neu.sur_MAD = mean(MAD[which(cond.load == "LoNeuSurprise")], na.rm = TRUE),
hi.neu.sur_MAD = mean(MAD[which(cond.load == "HiNeuSurprise")], na.rm = TRUE),
lo.emo.sur_n_MAD = mean(MAD[which(cond.full == "LoEmoSurprise Sur.Neg")], na.rm = TRUE),
lo.emo.sur_p_MAD = mean(MAD[which(cond.full == "LoEmoSurprise Sur.Pos")], na.rm = TRUE),
hi.emo.sur_n_MAD = mean(MAD[which(cond.full == "HiEmoSurprise Sur.Neg")], na.rm = TRUE),
hi.emo.sur_p_MAD = mean(MAD[which(cond.full == "HiEmoSurprise Sur.Pos")], na.rm = TRUE),
lo.neu.sur_n_MAD = mean(MAD[which(cond.full == "LoNeuSurprise Sur.Neg")], na.rm = TRUE),
lo.neu.sur_p_MAD = mean(MAD[which(cond.full == "LoNeuSurprise Sur.Pos")], na.rm = TRUE),
hi.neu.sur_n_MAD = mean(MAD[which(cond.full == "HiNeuSurprise Sur.Neg")], na.rm = TRUE),
hi.neu.sur_p_MAD = mean(MAD[which(cond.full == "HiNeuSurprise Sur.Pos")], na.rm = TRUE),
lo.emo.ang_RTz = mean(RTz[which(cond.load == "LoEmoAngry")], na.rm = TRUE),
hi.emo.ang_RTz = mean(RTz[which(cond.load == "HiEmoAngry")], na.rm = TRUE),
lo.neu.ang_RTz = mean(RTz[which(cond.load == "LoNeuAngry")], na.rm = TRUE),
hi.neu.ang_RTz = mean(RTz[which(cond.load == "HiNeuAngry")], na.rm = TRUE),
lo.emo.hap_RTz = mean(RTz[which(cond.load == "LoEmoHappy")], na.rm = TRUE),
hi.emo.hap_RTz = mean(RTz[which(cond.load == "HiEmoHappy")], na.rm = TRUE),
lo.neu.hap_RTz = mean(RTz[which(cond.load == "LoNeuHappy")], na.rm = TRUE),
hi.neu.hap_RTz = mean(RTz[which(cond.load == "HiNeuHappy")], na.rm = TRUE),
lo.emo.sur_p_RTz = mean(RTz[which(cond.full == "LoEmoSurprise Sur.Pos")], na.rm = TRUE),
hi.emo.sur_p_RTz = mean(RTz[which(cond.full == "HiEmoSurprise Sur.Pos")], na.rm = TRUE),
lo.neu.sur_p_RTz = mean(RTz[which(cond.full == "LoNeuSurprise Sur.Pos")], na.rm = TRUE),
hi.neu.sur_p_RTz = mean(RTz[which(cond.full == "HiNeuSurprise Sur.Pos")], na.rm = TRUE),
lo.emo.sur_n_RTz = mean(RTz[which(cond.full == "LoEmoSurprise Sur.Neg")], na.rm = TRUE),
hi.emo.sur_n_RTz = mean(RTz[which(cond.full == "HiEmoSurprise Sur.Neg")], na.rm = TRUE),
lo.neu.sur_n_RTz = mean(RTz[which(cond.full == "LoNeuSurprise Sur.Neg")], na.rm = TRUE),
hi.neu.sur_n_RTz = mean(RTz[which(cond.full == "HiNeuSurprise Sur.Neg")], na.rm = TRUE),
lo.emo.sur_RTz = mean(RTz[which(cond.load == "LoEmoSurprise")], na.rm = TRUE),
hi.emo.sur_RTz = mean(RTz[which(cond.load == "HiEmoSurprise")], na.rm = TRUE),
lo.neu.sur_RTz = mean(RTz[which(cond.load == "LoNeuSurprise")], na.rm = TRUE),
hi.neu.sur_RTz = mean(RTz[which(cond.load == "HiNeuSurprise")], na.rm = TRUE),
lo.neu.RTz = mean(RTz[which(factor == "NEU LOW" & trialtype == "face")], na.rm = TRUE),
hi.neu.RTz = mean(RTz[which(factor == "NEU HIGH" & trialtype == "face")], na.rm = TRUE),
lo.emo.RTz = mean(RTz[which(factor == "EMO LOW" & trialtype == "face")], na.rm = TRUE),
hi.emo.RTz = mean(RTz[which(factor == "EMO HIGH" & trialtype == "face")], na.rm = TRUE)))
write.csv(MT.data.rating.table2, paste("Data/Cleaned_Data/Final.Data.csv",format(Sys.time(),'_%Y-%m-%d_%H-%M-%S'),
'.csv',sep = ''))
data <- read.csv("~/Documents/Nick-Grad/Neta_Lab/depletion_study/study2/Analyses/WorkingMemoryLoads/Data/Cleaned_Data/Final.Data.csv_2019-08-14_08-52-46.csv")
### assess normality ###
shapiro.test(data$lo.neu.sur_rate) # non-normal
shapiro.test(data$hi.neu.sur_rate) # non-normal
shapiro.test(data$lo.emo.sur_rate) # non-normal
shapiro.test(data$hi.emo.sur_rate) # non-normal
### make data long ###
friedman.data <- gather(data, key = "Condition", value = "Percent Negative Ratings",
lo.neu.sur_rate, hi.neu.sur_rate, lo.emo.sur_rate, hi.emo.sur_rate)
### run Friedman's test and store results ###
friedman.results <- friedman.test(`Percent Negative Ratings` ~ Condition|subjID, data = friedman.data)
View(friedman.results)
## assess normality ###
shapiro.test(data$lo.neu.sur_RT)
shapiro.test(data$hi.neu.sur_RT)
shapiro.test(data$lo.emo.sur_RT)
shapiro.test(data$hi.emo.sur_RT)
### force normality ###
RTz.long <- gather(data, key = Condition, value = RTz,
lo.neu.sur_RTz,
hi.neu.sur_RTz,
lo.emo.sur_RTz,
hi.emo.sur_RTz)
### run Friedman's test and store results ###
RTz.friedman <- friedman.test(RTz ~ Condition|subjID, data = RTz.long)
lo.emo.v.lo.neu.RTz <- wilcox_test(data$lo.emo.sur_RTz, data$lo.neu.sur_RTz, paired = TRUE, conf.int = TRUE)
lo.emo.v.lo.neu.RTz <- wilcox_test(data$lo.emo.sur_RTz, data$lo.neu.sur_RTz, paired = TRUE, conf.int = TRUE)
lo.emo.v.lo.neu.RTz <- wilcox_test(data$lo.emo.sur_RTz, data$lo.neu.sur_RTz, paired = TRUE, conf.int = TRUE)
### import z score updated function ###
source("~/Documents/Nick-Grad/Neta_Lab/depletion_study/study2/Analyses/WorkingMemoryLoads/wilcox_test.R")
## assess normality ###
shapiro.test(data$lo.neu.sur_RT)
shapiro.test(data$hi.neu.sur_RT)
shapiro.test(data$lo.emo.sur_RT)
shapiro.test(data$hi.emo.sur_RT)
### force normality ###
RTz.long <- gather(data, key = Condition, value = RTz,
lo.neu.sur_RTz,
hi.neu.sur_RTz,
lo.emo.sur_RTz,
hi.emo.sur_RTz)
### run Friedman's test and store results ###
RTz.friedman <- friedman.test(RTz ~ Condition|subjID, data = RTz.long)
lo.emo.v.lo.neu.RTz <- wilcox_test(data$lo.emo.sur_RTz, data$lo.neu.sur_RTz, paired = TRUE, conf.int = TRUE)
lo.emo.v.hi.neu.RTz <- wilcox_test(data$lo.emo.sur_RTz, data$hi.neu.sur_RTz, paired = TRUE, conf.int = TRUE)
lo.emo.v.hi.emo.RTz <- wilcox_test(data$lo.emo.sur_RTz, data$hi.emo.sur_RTz, paired = TRUE, conf.int = TRUE)
hi.emo.v.lo.neu.RTz <- wilcox_test(data$hi.emo.sur_RTz, data$lo.neu.sur_RTz, paired = TRUE, conf.int = TRUE)
hi.emo.v.hi.neu.RTz <- wilcox_test(data$hi.emo.sur_RTz, data$hi.neu.sur_RTz, paired = TRUE, conf.int = TRUE)
lo.neu.v.hi.neu.RTz <- wilcox_test(data$hi.neu.sur_RTz, data$lo.neu.sur_RTz, paired = TRUE, conf.int = TRUE)
#
# # RTz.long$RTz <- ave(RTz.long$RTz, RTz.long$subjID, FUN=scale)
#
# # wide <- spread(RTz.long, key = Condition, value = RTz)
# # hapiro.test(wide$lo.emo.sur_RT)
# ### make factors ###
# RTz.long$Load <- ifelse(RTz.long$Condition == "lo.neu.sur_RTz", "Low",
#                          ifelse(RTz.long$Condition == "lo.emo.sur_RTz", "Low",
#                                 ifelse(RTz.long$Condition == "hi.neu.sur_RTz", "High",
#                                        ifelse(RTz.long$Condition == "hi.emo.sur_RTz", "High", ""))))
#
# RTz.long$Type <- ifelse(RTz.long$Condition == "lo.neu.sur_RTz", "Neutral",
#                          ifelse(RTz.long$Condition == "lo.emo.sur_RTz", "Emotional",
#                                 ifelse(RTz.long$Condition == "hi.neu.sur_RTz", "Neutral",
#                                        ifelse(RTz.long$Condition == "hi.emo.sur_RTz", "Emotional", ""))))
#
# ### make w/in subjs factors ###
# RTz.long$subjID <- as.factor(RTz.long$subjID)
#
# ### traditional ANOVA ###
# RTaov <- with(RTz.long,
#                    aov(RTz ~ (Load * Type) +
#                        Error(subjID / (Load * Type))), contrasts = contr.sum())
# summary(RTaov)
# RTaov <- tidy(RTaov)
# ### make long ###
# data.long <- gather(data, key = "Condition", value = "ReactionTime",
#                     lo.neu.sur_RT, hi.neu.sur_RT,
#                     lo.emo.sur_RT, hi.emo.sur_RT)
#
# ### make factors ###
# data.long$Load <- ifelse(data.long$Condition == "lo.neu.sur_RT", "Low",
#                          ifelse(data.long$Condition == "lo.emo.sur_RT", "Low",
#                                 ifelse(data.long$Condition == "hi.neu.sur_RT", "High",
#                                        ifelse(data.long$Condition == "hi.emo.sur_RT", "High", ""))))
#
# data.long$Type <- ifelse(data.long$Condition == "lo.neu.sur_RT", "Neutral",
#                          ifelse(data.long$Condition == "lo.emo.sur_RT", "Emotional",
#                                 ifelse(data.long$Condition == "hi.neu.sur_RT", "Neutral",
#                                        ifelse(data.long$Condition == "hi.emo.sur_RT", "Emotional", ""))))
#
# ### make w/in subjs factors ###
# data.long$subjID <- as.factor(data.long$subjID)
#
# ### traditional ANOVA ###
# RTaov <- with(data.long,
#                    aov(ReactionTime ~ (Load * Type) +
#                        Error(subjID / (Load * Type))), contrasts = contr.sum())
# summary(RTaov)
# RTaov <- tidy(RTaov)
# ### friedman's nonparametric ###
# friedman.RT.results <- friedman.test(ReactionTime ~ Condition|subjID, data = data.long)
# ### Follow up wilcoxon tests ###
# lo.emo.v.lo.neuRT <- wilcox.test(data$lo.emo.sur_RT, data$lo.neu.sur_RT, paired = TRUE, conf.int = TRUE)
# lo.emo.v.hi.neuRT <- wilcox.test(data$lo.emo.sur_RT, data$hi.neu.sur_RT, paired = TRUE, conf.int = TRUE)
# lo.emo.v.hi.emoRT <- wilcox.test(data$lo.emo.sur_RT, data$hi.emo.sur_RT, paired = TRUE, conf.int = TRUE)
# hi.emo.v.lo.neuRT <- wilcox.test(data$hi.emo.sur_RT, data$lo.neu.sur_RT, paired = TRUE, conf.int = TRUE)
# hi.emo.v.hi.neuRT <- wilcox.test(data$hi.emo.sur_RT, data$hi.neu.sur_RT, paired = TRUE, conf.int = TRUE)
# lo.neu.v.hi.neuRT <- wilcox.test(data$hi.neu.sur_RT, data$lo.neu.sur_RT, paired = TRUE, conf.int = TRUE)
#
# summary(friedman.RT.results)
ggplot(RTz.long, aes(Condition, `ReactionTime`, fill = as.factor(Condition))) +
geom_bar(stat = "summary", fun.y = "mean") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1)
ggplot(RTz.long, aes(Condition, `RTz`, fill = as.factor(Condition))) +
geom_bar(stat = "summary", fun.y = "mean") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1)
## assess normality ###
shapiro.test(data$lo.neu.sur_RT)
shapiro.test(data$hi.neu.sur_RT)
shapiro.test(data$lo.emo.sur_RT)
shapiro.test(data$hi.emo.sur_RT)
### make long ###
data.long <- gather(data, key = "Condition", value = "ReactionTime",
lo.neu.sur_RT, hi.neu.sur_RT,
lo.emo.sur_RT, hi.emo.sur_RT)
### make factors ###
data.long$Load <- ifelse(data.long$Condition == "lo.neu.sur_RT", "Low",
ifelse(data.long$Condition == "lo.emo.sur_RT", "Low",
ifelse(data.long$Condition == "hi.neu.sur_RT", "High",
ifelse(data.long$Condition == "hi.emo.sur_RT", "High", ""))))
data.long$Type <- ifelse(data.long$Condition == "lo.neu.sur_RT", "Neutral",
ifelse(data.long$Condition == "lo.emo.sur_RT", "Emotional",
ifelse(data.long$Condition == "hi.neu.sur_RT", "Neutral",
ifelse(data.long$Condition == "hi.emo.sur_RT", "Emotional", ""))))
### make w/in subjs factors ###
data.long$subjID <- as.factor(data.long$subjID)
### traditional ANOVA ###
RTaov <- with(data.long,
aov(ReactionTime ~ (Load * Type) +
Error(subjID / (Load * Type))), contrasts = contr.sum())
summary(RTaov)
RTaov <- tidy(RTaov)
ggplot(data.long, aes(Condition, `ReactionTime`, fill = as.factor(Condition))) +
geom_bar(stat = "summary", fun.y = "mean") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1)
### assess for normality ###
shapiro.test(data$lo.neu.sur_n_RT) ## non-normal
shapiro.test(data$lo.neu.sur_p_RT) ## normal
### assess for normality ###
shapiro.test(data$lo.neu.sur_n_RT) ## non-normal
shapiro.test(data$lo.neu.sur_p_RT) ## normal
shapiro.test(data$hi.neu.sur_n_RT) ## non-normal
shapiro.test(data$hi.neu.sur_p_RT) ## normal
shapiro.test(data$lo.emo.sur_n_RT) ## non-normal
shapiro.test(data$lo.emo.sur_p_RT) ## non-normal
shapiro.test(data$hi.emo.sur_n_RT) ## barely normal
shapiro.test(data$hi.emo.sur_p_RT) ## non-normal
### t-test for pos ratings vs. neg ratings
lo.neu.RT.pvn <- wilcox.test(data$lo.neu.sur_n_RT, data$lo.neu.sur_p_RT, paired = TRUE)
wilcox.test(data$hi.neu.sur_n_RT, data$hi.neu.sur_p_RT, paired = TRUE)
wilcox.test(data$lo.emo.sur_n_RT, data$lo.emo.sur_p_RT, paired = TRUE)
wilcox.test(data$hi.emo.sur_n_RT, data$hi.emo.sur_p_RT, paired = TRUE)
### make long ###
lo.neu.resp <- gather(data, key = "Condition", value =  "ReactionTime",
lo.neu.sur_n_RT, lo.neu.sur_p_RT)
lo.emo.resp <- gather(data, key = "Condition", value =  "ReactionTime",
lo.emo.sur_n_RT, lo.emo.sur_p_RT)
hi.neu.resp <- gather(data, key = "Condition", value =  "ReactionTime",
hi.neu.sur_n_RT, hi.neu.sur_p_RT)
hi.emo.resp <- gather(data, key = "Condition", value =  "ReactionTime",
hi.emo.sur_n_RT, hi.emo.sur_p_RT)
lo.neu.resp$Condition <- as.factor(lo.neu.resp$Condition)
lo.emo.resp$Condition <- as.factor(lo.emo.resp$Condition)
hi.neu.resp$Condition <- as.factor(hi.neu.resp$Condition)
hi.emo.resp$Condition <- as.factor(hi.emo.resp$Condition)
lo.neu.resp.plot <- ggplot(lo.neu.resp, aes(Condition, ReactionTime, fill = as.factor(Condition))) +
geom_bar(stat = "summary", fun.y = "mean", na.rm = TRUE) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1)
lo.emo.resp.plot <- ggplot(lo.emo.resp, aes(Condition, ReactionTime, fill = as.factor(Condition))) +
geom_bar(stat = "summary", fun.y = "mean", na.rm = TRUE) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1)
hi.neu.resp.plot <- ggplot(hi.neu.resp, aes(Condition, ReactionTime, fill = as.factor(Condition))) +
geom_bar(stat = "summary", fun.y = "mean", na.rm = TRUE) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1)
hi.emo.resp.plot <- ggplot(hi.emo.resp, aes(Condition, ReactionTime, fill = as.factor(Condition))) +
geom_bar(stat = "summary", fun.y = "mean", na.rm = TRUE) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1)
# lo.neu.resp.plot
# hi.neu.resp.plot
# lo.emo.resp.plot
# hi.emo.resp.plot
# lo.neu.resp.plot
lo.neu.resp.plot
# hi.neu.resp.plot
lo.emo.resp.plot
# hi.neu.resp.plot
hi.neu.resp.plot
# hi.emo.resp.plot
hi.emo.resp.plot
###  MAD analyses ###
### check for normality ###
shapiro.test(data$lo.emo.sur_MAD) # barely normal (p = .054)
shapiro.test(data$hi.emo.sur_MAD) # barely normal (p = .08)
shapiro.test(data$lo.neu.sur_MAD) # normal
shapiro.test(data$hi.neu.sur_MAD) # normal
results.long <- gather(data, key = "Condition", value = "MAD",
lo.emo.sur_MAD, hi.emo.sur_MAD, lo.neu.sur_MAD, hi.neu.sur_MAD)
results.long$load <- ifelse(results.long$Condition == "lo.emo.sur_MAD", "Low",
ifelse(results.long$Condition == "lo.neu.sur_MAD", "Low", "High"))
results.long$type <- ifelse(results.long$Condition == "lo.emo.sur_MAD", "Emo",
ifelse(results.long$Condition == "hi.emo.sur_MAD", "Emo", "Neu"))
MAD.anova <- aov(MAD ~ load * type, data = results.long)
summary.aov(MAD.anova)
friedman.test(MAD ~ Condition|subjID, data = results.long)
wilcox.test(data$lo.emo.sur_MAD, data$hi.emo.sur_MAD)
wilcox.test(data$lo.emo.sur_MAD, data$hi.neu.sur_MAD)
wilcox.test(data$lo.emo.sur_MAD, data$lo.neu.sur_MAD)
wilcox.test(data$lo.emo.sur_MAD, data$hi.emo.sur_MAD)
wilcox.test(data$lo.emo.sur_MAD, data$hi.neu.sur_MAD)
wilcox.test(data$lo.emo.sur_MAD, data$lo.neu.sur_MAD)
wilcox.test(data$hi.emo.sur_MAD, data$lo.neu.sur_MAD)
wilcox.test(data$lo.neu.sur_MAD, data$hi.neu.sur_MAD)
wilcox.test(data$hi.emo.sur_MAD, data$lo.neu.sur_MAD)
wilcox.test(data$lo.neu.sur_MAD, data$hi.neu.sur_MAD)
summary.aov(MAD.anova)
ggplot(MAD.long, aes(Condition, MAD, fill = as.factor(Condition))) +
geom_bar(stat = "summary", fun.y = "mean") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1)
MAD.long <- gather(data, key = "Condition", value = "MAD",
lo.emo.sur_MAD, hi.emo.sur_MAD, lo.neu.sur_MAD, hi.neu.sur_MAD)
MAD.long <- gather(data, key = "Condition", value = "MAD",
lo.emo.sur_MAD, hi.emo.sur_MAD, lo.neu.sur_MAD, hi.neu.sur_MAD)
MAD.long$load <- ifelse(MAD.long$Condition == "lo.emo.sur_MAD", "Low",
ifelse(MAD.long$Condition == "lo.neu.sur_MAD", "Low", "High"))
MAD.long$load <- ifelse(MAD.long$Condition == "lo.emo.sur_MAD", "Low",
ifelse(MAD.long$Condition == "lo.neu.sur_MAD", "Low", "High"))
MAD.long$type <- ifelse(MAD.long$Condition == "lo.emo.sur_MAD", "Emo",
ifelse(MAD.long$Condition == "hi.emo.sur_MAD", "Emo", "Neu"))
MAD.anova <- aov(MAD ~ load * type, data = MAD.long)
summary.aov(MAD.anova)
ggplot(MAD.long, aes(Condition, MAD, fill = as.factor(Condition))) +
geom_bar(stat = "summary", fun.y = "mean") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1)
MAD.anova <- tidy(MAD.anova)
View(MAD.anova)
shapiro.test(data$lo.emo.sur_n_MAD)
shapiro.test(data$lo.emo.sur_p_MAD)
shapiro.test(data$lo.emo.sur_n_MAD)
### assess for normality ###
shapiro.test(data$lo.neu.sur_n_MAD) ## non-normal
shapiro.test(data$lo.neu.sur_p_MAD) ## normal
shapiro.test(data$hi.neu.sur_n_MAD) ## non-normal
shapiro.test(data$hi.neu.sur_p_MAD) ## normal
shapiro.test(data$lo.emo.sur_n_MAD) ## non-normal
shapiro.test(data$lo.emo.sur_p_MAD) ## non-normal
shapiro.test(data$hi.emo.sur_n_MAD) ## barely normal
shapiro.test(data$hi.emo.sur_p_MAD) ## non-normal
### t-test for pos ratings vs. neg ratings
wilcox.test(data$lo.neu.sur_n_RT, data$lo.neu.sur_p_RT, paired = TRUE)
### t-test for pos ratings vs. neg ratings
wilcox.test(data$lo.neu.sur_n_MAD, data$lo.neu.sur_p_MAD, paired = TRUE)
wilcox.test(data$hi.neu.sur_n_MAD, data$hi.neu.sur_p_MAD, paired = TRUE)
wilcox.test(data$lo.emo.sur_n_MAD, data$lo.emo.sur_p_MAD, paired = TRUE)
wilcox.test(data$hi.emo.sur_n_MAD, data$hi.emo.sur_p_MAD, paired = TRUE)
### t-test for pos ratings vs. neg ratings
wilcox.test(data$lo.neu.sur_n_MAD, data$lo.neu.sur_p_MAD, paired = TRUE)
wilcox.test(data$hi.neu.sur_n_MAD, data$hi.neu.sur_p_MAD, paired = TRUE)
wilcox.test(data$lo.emo.sur_n_MAD, data$lo.emo.sur_p_MAD, paired = TRUE)
wilcox.test(data$hi.emo.sur_n_MAD, data$hi.emo.sur_p_MAD, paired = TRUE)
### make long ###
lo.neu.resp.MAD <- gather(data, key = "Condition", value =  "MAD",
lo.neu.sur_n_MAD, lo.neu.sur_p_MAD)
lo.emo.resp.MAD  <- gather(data, key = "Condition", value =  "MAD",
lo.emo.sur_n_MAD, lo.emo.sur_p_MAD)
hi.neu.resp.MAD  <- gather(data, key = "Condition", value =  "MAD",
hi.neu.sur_n_MAD, hi.neu.sur_p_MAD)
hi.emo.resp.MAD  <- gather(data, key = "Condition", value =  "MAD",
hi.emo.sur_n_MAD, hi.emo.sur_p_MAD)
lo.neu.resp.MAD$Condition <- as.factor(lo.neu.resp$Condition)
lo.emo.resp.MAD$Condition <- as.factor(lo.emo.resp$Condition)
hi.neu.resp.MAD$Condition <- as.factor(hi.neu.resp$Condition)
hi.emo.resp.MAD$Condition <- as.factor(hi.emo.resp$Condition)
lo.neu.resp.MAD.plot <- ggplot(lo.neu.resp, aes(Condition, MAD, fill = as.factor(Condition))) +
geom_bar(stat = "summary", fun.y = "mean", na.rm = TRUE) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1)
lo.emo.resp.MAD.plot <- ggplot(lo.emo.resp, aes(Condition, MAD, fill = as.factor(Condition))) +
geom_bar(stat = "summary", fun.y = "mean", na.rm = TRUE) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1)
hi.neu.resp.MAD.plot <- ggplot(hi.neu.resp, aes(Condition, MAD, fill = as.factor(Condition))) +
geom_bar(stat = "summary", fun.y = "mean", na.rm = TRUE) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1)
hi.emo.resp.MAD.plot <- ggplot(hi.emo.resp, aes(Condition, MAD, fill = as.factor(Condition))) +
geom_bar(stat = "summary", fun.y = "mean", na.rm = TRUE) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1)
lo.neu.resp.MAD.plot
### make long ###
lo.neu.resp.MAD <- gather(data, key = "Condition", value =  "MAD",
lo.neu.sur_n_MAD, lo.neu.sur_p_MAD)
lo.emo.resp.MAD  <- gather(data, key = "Condition", value =  "MAD",
lo.emo.sur_n_MAD, lo.emo.sur_p_MAD)
hi.neu.resp.MAD  <- gather(data, key = "Condition", value =  "MAD",
hi.neu.sur_n_MAD, hi.neu.sur_p_MAD)
hi.emo.resp.MAD  <- gather(data, key = "Condition", value =  "MAD",
hi.emo.sur_n_MAD, hi.emo.sur_p_MAD)
lo.neu.resp.MAD.plot <- ggplot(lo.neu.resp.MAD, aes(Condition, MAD, fill = as.factor(Condition))) +
geom_bar(stat = "summary", fun.y = "mean", na.rm = TRUE) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1)
lo.emo.resp.MAD.plot <- ggplot(lo.emo.resp.MAD, aes(Condition, MAD, fill = as.factor(Condition))) +
geom_bar(stat = "summary", fun.y = "mean", na.rm = TRUE) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1)
hi.neu.resp.MAD.plot <- ggplot(hi.neu.resp.MAD, aes(Condition, MAD, fill = as.factor(Condition))) +
geom_bar(stat = "summary", fun.y = "mean", na.rm = TRUE) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1)
hi.emo.resp.MAD.plot <- ggplot(hi.emo.resp.MAD, aes(Condition, MAD, fill = as.factor(Condition))) +
geom_bar(stat = "summary", fun.y = "mean", na.rm = TRUE) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1)
lo.neu.resp.MAD.plot
lo.neu.resp.MAD.plot
lo.emo.resp.MAD.plot
lo.emo.resp.MAD.plot
hi.neu.resp.MAD.plot
hi.emo.resp.MAD.plot
### t-test for pos ratings vs. neg ratings
wilcox.test(data$lo.neu.sur_n_MAD, data$lo.neu.sur_p_MAD, paired = TRUE) ### different
lo.neu.resp.MAD.plot
wilcox.test(data$hi.neu.sur_n_MAD, data$hi.neu.sur_p_MAD, paired = TRUE) ### trending
hi.neu.resp.MAD.plot
wilcox.test(data$lo.emo.sur_n_MAD, data$lo.emo.sur_p_MAD, paired = TRUE) ### non-sig
hi.neu.resp.MAD.plot
lo.emo.resp.MAD.plot
wilcox.test(data$lo.emo.sur_n_MAD, data$lo.emo.sur_p_MAD, paired = TRUE) ### non-sig
wilcox.test(data$hi.emo.sur_n_MAD, data$hi.emo.sur_p_MAD, paired = TRUE) ### non-sig
hi.emo.resp.MAD.plot
lo.neu.resp.MAD.plot
lo.emo.resp.MAD.plot
hi.neu.resp.MAD.plot
hi.emo.resp.MAD.plot
### make MAD wide ###
sur.pos.wideMAD <- sur.pos.MTresults2 %>% spread(cond.load, MAD)
#write.csv(subRTs, "~/Desktop/subrts.csv")
### group by sur-pos vs sur-neg ###
sur.MTresults2 <- subset(MT.results2, cond.correct == "Surprise")
sur.pos.MTresults2 <- subset(sur.MTresults2, rate == 0)
sur.neg.MTresults2 <- subset(sur.MTresults2, rate == 1)
library(yarrr)
### make MAD wide ###
sur.pos.wideMAD <- sur.pos.MTresults2 %>% spread(cond.load, MAD)
sur.pos.wideMAD <- (ddply(sur.pos.wideMAD, "subjID", summarise,
hi.em.sur.MAD.p = mean(HiEmoSurprise, na.rm = TRUE),
lo.em.sur.MAD.p = mean(LoEmoSurprise, na.rm = TRUE),
hi.neu.sur.MAD.p = mean(HiNeuSurprise, na.rm = TRUE),
lo.neu.sur.MAD.p = mean(LoNeuSurprise, na.rm = TRUE),
LOW.surp.MAD.p = mean(c(LoNeuSurprise,LoEmoSurprise), na.rm = TRUE),
HI.surp.MAD.p = mean(c(HiNeuSurprise,HiEmoSurprise), na.rm = TRUE),
NEU.surp.MAD.p = mean(c(LoNeuSurprise,HiNeuSurprise), na.rm = TRUE),
EMO.surp.MAD.p = mean(c(LoEmoSurprise,HiEmoSurprise), na.rm = TRUE),
lo.emo.sur_p_RT = mean(lo.emo.sur_p_RT, na.rm = TRUE),
hi.emo.sur_p_RT = mean(hi.emo.sur_p_RT, na.rm = TRUE),
lo.neu.sur_p_RT = mean(lo.neu.sur_p_RT, na.rm = TRUE),
hi.neu.sur_p_RT = mean(hi.neu.sur_p_RT, na.rm = TRUE)))
View(sur.pos.wideMAD)
