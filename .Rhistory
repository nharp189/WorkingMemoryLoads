MT.data$data$load <- ifelse(MT.data$data$cond.load %in% c("LoNeuSurpriseYes", "LoNeuAngryYes",
"LoNeuHappyYes", "LoNeuSurpriseNo",
"LoNeuAngryNo", "LoNeuHappyNo",
"LoEmoSurpriseYes", "LoEmoAngryYes",
"LoEmoHappyYes", "LoEmoSurpriseNo",
"LoEmoAngryNo", "LoEmoHappyNo",
"LoNeuSurprise", "LoNeuAngry",
"LoNeuHappy", "LoNeuSurprise",
"LoNeuAngry", "LoNeuHappy",
"LoEmoSurprise", "LoEmoAngry",
"LoEmoHappy", "LoEmoSurprise",
"LoEmoAngry", "LoEmoHappy"),
"LOW",
ifelse(MT.data$data$cond.load %in% c("HiNeuSurpriseYes", "HiNeuAngryYes",
"HiNeuHappyYes", "HiNeuSurpriseNo",
"HiNeuAngryNo", "HiNeuHappyNo",
"HiEmoSurpriseYes", "HiEmoAngryYes",
"HiEmoHappyYes", "HiEmoSurpriseNo",
"HiEmoAngryNo", "HiEmoHappyNo",
"HiNeuSurprise", "HiNeuAngry",
"HiNeuHappy", "HiNeuSurprise",
"HiNeuAngry", "HiNeuHappy",
"HiEmoSurprise", "HiEmoAngry",
"HiEmoHappy", "HiEmoSurprise",
"HiEmoAngry", "HiEmoHappy"),
"HIGH", NA))
### create correct response column for memory probes ###
MT.data$data$mem.cor <- ifelse(MT.data$data$cond.correct == "Yes",
ifelse(MT.data$data$rate == 0, 1, 0),
ifelse(MT.data$data$cond.correct == "No",
ifelse(MT.data$data$rate == 1, 1, 0), ""))
### create correct response for EMO mem probes ###
MT.data$data$emo.mem <- as.numeric(ifelse(MT.data$data$cond.load %in% c("LoEmoSurpriseYes","HiEmoSurpriseYes",
"LoEmoAngryYes", "HiEmoAngryYes",
"LoEmoHappyYes", "HiEmoHappyYes",
"LoEmoSurpriseNo","HiEmoSurpriseNo",
"LoEmoAngryNo", "HiEmoAngryNo",
"LoEmoHappyNo", "HiEmoHappyNo"),
MT.data$data$mem.cor, ""))
### create correct response for EMO mem probes ###
MT.data$data$neu.mem <- as.numeric(ifelse(MT.data$data$cond.load %in% c("LoNeuSurpriseYes","HiNeuSurpriseYes",
"LoNeuAngryYes", "HiNeuAngryYes",
"LoNeuHappyYes", "HiNeuHappyYes",
"LoNeuSurpriseNo","HiNeuSurpriseNo",
"LoNeuAngryNo", "HiNeuAngryNo",
"LoNeuHappyNo", "HiNeuHappyNo"),
MT.data$data$mem.cor, ""))
### create correct response for LOW mem probes ###
MT.data$data$lo.mem <- as.numeric(ifelse(MT.data$data$cond.load %in% c("LoNeuSurpriseYes","LoEmoSurpriseYes",
"LoNeuAngryYes", "LoEmoAngryYes",
"LoNeuHappyYes", "LoEmoHappyYes",
"LoNeuSurpriseNo","LoEmoSurpriseNo",
"LoNeuAngryNo", "LoEmoAngryNo",
"LoNeuHappyNo", "LoEmoHappyNo"),
MT.data$data$mem.cor, ""))
### create correct response for HIGH mem probes ###
MT.data$data$hi.mem <- as.numeric(ifelse(MT.data$data$cond.load %in% c("HiNeuSurpriseYes","HiEmoSurpriseYes",
"HiNeuAngryYes", "HiEmoAngryYes",
"HiNeuHappyYes", "HiEmoHappyYes",
"HiNeuSurpriseNo","HiEmoSurpriseNo",
"HiNeuAngryNo", "HiEmoAngryNo",
"HiNeuHappyNo", "HiEmoHappyNo"),
MT.data$data$mem.cor, ""))
### Create column to average for each face ###
MT.data$data$mem.cor.yes <- ifelse(MT.data$data$cond.correct == "Yes", MT.data$data$mem.cor, NA)
MT.data$data$mem.cor.no <- ifelse(MT.data$data$cond.correct == "No", MT.data$data$mem.cor, NA)
MT.data$data$mem.cor.yes <- as.numeric(MT.data$data$mem.cor.yes)
MT.data$data$mem.cor.no <- as.numeric(MT.data$data$mem.cor.no)
### Create informative condition variables (i.e., angry, happy, sur-neg, sur-pos, etc.) ###
MT.data$data$condition.rating <- ifelse(MT.data$data$cond.correct == "Angry",
ifelse(MT.data$data$rate == 1, "Angry", NA),
ifelse(MT.data$data$cond.correct == "Happy",
ifelse(MT.data$data$rate == 0, "Happy", NA),
ifelse(MT.data$data$cond.correct == "Surprise",
ifelse(MT.data$data$rate == 1, "Sur.Neg", "Sur.Pos"), NA)))
### label load, face, and ratings together ###
MT.data$data$cond.full <- paste(MT.data$data$cond.load, MT.data$data$condition.rating)
## there are no factors b/w memory trials.. while I did not randomize correctly,
## let's look to see if there's some interesting relationships. Starting by
## categorizing memory trials...
MT.data$data$memtype <- paste(MT.data$data$load,MT.data$data$type)
MT.data$data$memtype <- ifelse(MT.data$data$trialtype == "memory",
MT.data$data$memtype, "")
### make subj factor ###
MT.data$data$subjID <- factor(MT.data$data$subjID)
### add RT z scores ###
MT.data$data$RTz <- ave(MT.data$data$RT, MT.data$data$subjID, FUN=scale)
### factor ###
MT.data$data$factor <- paste(MT.data$data$type, MT.data$data$load)
}
###  MT Measures ###
{### get derivatives ###
MT.data <- mt_derivatives(MT.data)
### Flip traSurp.Negectories ###
MT.data <- mt_remap_symmetric(MT.data)
### adSurp.Negust to identical start/end traSurp.Negectories ###
MT.data <- mt_align_start_end(MT.data)
### normalize, there's some issues w/ trials w/ 0 variability: hence this weird bit ###
#MT.data$data$pos_var <- apply(MT.data$trajectories[,,"xpos"],1,var,na.rm=TRUE) + apply(MT.data$trajectories[,,"ypos"],1,var,na.rm=TRUE)
#table(MT.data$data$pos_var==0)
#MT.data <- mt_subset(MT.data, pos_var>0)
MT.data <- mt_time_normalize(MT.data)
### add measures ###
MT.data <- mt_measures(MT.data)
}}
### check RT min / max for outliers ###
meanrt <- mean(MT.data$data$RT[which(MT.data$data$trialtype == "face")])
sdrt <- sd(MT.data$data$RT[which(MT.data$data$trialtype == "face")])
outlier <- meanrt + (3*sdrt)
#print(outlier)
### remove trials > outlierRT ###
MT.data$data <-MT.data$data[!(MT.data$data$RT >= outlier),]
### flag trials before incorrect memory probes ###
for(i in 2:nrow(MT.data$data)) {
MT.data$data$flag[i-1] <- ifelse(MT.data$data$mem.cor[i] == 0, 0, 1)
}
### remove flagged trials ###
MT.data$data <- subset(MT.data$data, MT.data$data$flag == 1)
# Merge measures with trial data
MT.results2 <- dplyr::inner_join(
MT.data$data, MT.data$measures,
by="mt_id")
### is surprise ratings different from low vs high trials? ###
MT.data.rating.table2 <- (ddply(MT.results2, "subjID", summarise,
lo.emo.ang_rate = mean(rate[which(cond.correct == "Angry" & type == "EMO" & load == "LOW" & trialtype == "face")], na.rm = TRUE),
hi.emo.ang_rate = mean(rate[which(cond.correct == "Angry" & type == "EMO" & load == "HIGH" & trialtype == "face")], na.rm = TRUE),
lo.neu.ang_rate = mean(rate[which(cond.correct == "Angry" & type == "NEU" & load == "LOW" & trialtype == "face")], na.rm = TRUE),
hi.neu.ang_rate = mean(rate[which(cond.correct == "Angry" & type == "NEU" & load == "HIGH" & trialtype == "face")], na.rm = TRUE),
lo.emo.hap_rate = mean(rate[which(cond.correct == "Happy" & type == "EMO" & load == "LOW" & trialtype == "face")], na.rm = TRUE),
hi.emo.hap_rate = mean(rate[which(cond.correct == "Happy" & type == "EMO" & load == "HIGH" & trialtype == "face")], na.rm = TRUE),
lo.neu.hap_rate = mean(rate[which(cond.correct == "Happy" & type == "NEU" & load == "LOW" & trialtype == "face")], na.rm = TRUE),
hi.neu.hap_rate = mean(rate[which(cond.correct == "Happy" & type == "NEU" & load == "HIGH" & trialtype == "face")], na.rm = TRUE),
lo.emo.sur_rate = mean(rate[which(cond.correct == "Surprise" & type == "EMO" & load == "LOW" & trialtype == "face")], na.rm = TRUE),
hi.emo.sur_rate = mean(rate[which(cond.correct == "Surprise" & type == "EMO" & load == "HIGH" & trialtype == "face")], na.rm = TRUE),
lo.neu.sur_rate = mean(rate[which(cond.correct == "Surprise" & type == "NEU" & load == "LOW" & trialtype == "face")], na.rm = TRUE),
hi.neu.sur_rate = mean(rate[which(cond.correct == "Surprise" & type == "NEU" & load == "HIGH" & trialtype == "face")], na.rm = TRUE),
lo.emo.ang_RT = mean(RT.x[which(cond.correct == "Angry" & type == "EMO" & load == "LOW" & trialtype == "face")], na.rm = TRUE),
hi.emo.ang_RT = mean(RT.x[which(cond.correct == "Angry" & type == "EMO" & load == "HIGH" & trialtype == "face")], na.rm = TRUE),
lo.neu.ang_RT = mean(RT.x[which(cond.correct == "Angry" & type == "NEU" & load == "LOW" & trialtype == "face")], na.rm = TRUE),
hi.neu.ang_RT = mean(RT.x[which(cond.correct == "Angry" & type == "NEU" & load == "HIGH" & trialtype == "face")], na.rm = TRUE),
lo.emo.hap_RT = mean(RT.x[which(cond.correct == "Happy" & type == "EMO" & load == "LOW" & trialtype == "face")], na.rm = TRUE),
hi.emo.hap_RT = mean(RT.x[which(cond.correct == "Happy" & type == "EMO" & load == "HIGH" & trialtype == "face")], na.rm = TRUE),
lo.neu.hap_RT = mean(RT.x[which(cond.correct == "Happy" & type == "NEU" & load == "LOW" & trialtype == "face")], na.rm = TRUE),
hi.neu.hap_RT = mean(RT.x[which(cond.correct == "Happy" & type == "NEU" & load == "HIGH" & trialtype == "face")], na.rm = TRUE),
lo.emo.sur_n_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "EMO" & load == "LOW" & trialtype == "face" & rate == 1)], na.rm = TRUE),
hi.emo.sur_n_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "EMO" & load == "HIGH" & trialtype == "face" & rate == 1)], na.rm = TRUE),
lo.neu.sur_n_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "NEU" & load == "LOW" & trialtype == "face" & rate == 1)], na.rm = TRUE),
hi.neu.sur_n_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "NEU" & load == "HIGH" & trialtype == "face" & rate == 1)], na.rm = TRUE),
lo.emo.sur_p_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "EMO" & load == "LOW" & trialtype == "face" & rate == 0)], na.rm = TRUE),
hi.emo.sur_p_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "EMO" & load == "HIGH" & trialtype == "face" & rate == 0)], na.rm = TRUE),
lo.neu.sur_p_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "NEU" & load == "LOW" & trialtype == "face" & rate == 0)], na.rm = TRUE),
hi.neu.sur_p_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "NEU" & load == "HIGH" & trialtype == "face" & rate == 0)], na.rm = TRUE),
lo.neu.sur_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "NEU" & load == "LOW" & trialtype == "face")], na.rm = TRUE),
hi.neu.sur_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "NEU" & load == "HIGH" & trialtype == "face")], na.rm = TRUE),
lo.emo.sur_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "EMO" & load == "LOW" & trialtype == "face")], na.rm = TRUE),
hi.emo.sur_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "EMO" & load == "HIGH" & trialtype == "face")], na.rm = TRUE),
lo.sur_RT = mean(RT.x[which(cond.correct == "Surprise" & load == "LOW" & trialtype == "face")], na.rm = TRUE),
hi.sur_RT = mean(RT.x[which(cond.correct == "Surprise" & load == "HIGH" & trialtype == "face")], na.rm = TRUE),
neu.sur_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "NEU" & trialtype == "face")], na.rm = TRUE),
emo.sur_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "EMO" & trialtype == "face")], na.rm = TRUE),
lo.sur_n_RT = mean(RT.x[which(cond.correct == "Surprise" & load == "LOW" & trialtype == "face" & rate == 1)], na.rm = TRUE),
hi.sur_n_RT = mean(RT.x[which(cond.correct == "Surprise" & load == "HIGH" & trialtype == "face" & rate == 1)], na.rm = TRUE),
neu.sur_n_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "NEU" & trialtype == "face" & rate == 1)], na.rm = TRUE),
emo.sur_n_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "EMO" & trialtype == "face" & rate ==1)], na.rm = TRUE),
lo.sur_p_RT = mean(RT.x[which(cond.correct == "Surprise" & load == "LOW" & trialtype == "face" & rate == 0)], na.rm = TRUE),
hi.sur_p_RT = mean(RT.x[which(cond.correct == "Surprise" & load == "HIGH" & trialtype == "face" & rate == 0)], na.rm = TRUE),
neu.sur_p_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "NEU" & trialtype == "face" & rate == 0)], na.rm = TRUE),
emo.sur_p_RT = mean(RT.x[which(cond.correct == "Surprise" & type == "EMO" & trialtype == "face" & rate ==0)], na.rm = TRUE),
mem.cor.yes = mean(mem.cor.yes, na.rm = TRUE),
mem.cor.no = mean(mem.cor.no, na.rm = TRUE),
emo.mem = mean(emo.mem, na.rm = TRUE),
neu.mem = mean(neu.mem, na.rm = TRUE),
lo.mem = mean(lo.mem, na.rm = TRUE),
hi.mem = mean(hi.mem, na.rm = TRUE),
lo.emo.sur_MAD = mean(MAD[which(cond.load == "LoEmoSurprise")], na.rm = TRUE),
hi.emo.sur_MAD = mean(MAD[which(cond.load == "HiEmoSurprise")], na.rm = TRUE),
lo.neu.sur_MAD = mean(MAD[which(cond.load == "LoNeuSurprise")], na.rm = TRUE),
hi.neu.sur_MAD = mean(MAD[which(cond.load == "HiNeuSurprise")], na.rm = TRUE),
lo.emo.sur_n_MAD = mean(MAD[which(cond.full == "LoEmoSurprise Sur.Neg")], na.rm = TRUE),
lo.emo.sur_p_MAD = mean(MAD[which(cond.full == "LoEmoSurprise Sur.Pos")], na.rm = TRUE),
hi.emo.sur_n_MAD = mean(MAD[which(cond.full == "HiEmoSurprise Sur.Neg")], na.rm = TRUE),
hi.emo.sur_p_MAD = mean(MAD[which(cond.full == "HiEmoSurprise Sur.Pos")], na.rm = TRUE),
lo.neu.sur_n_MAD = mean(MAD[which(cond.full == "LoNeuSurprise Sur.Neg")], na.rm = TRUE),
lo.neu.sur_p_MAD = mean(MAD[which(cond.full == "LoNeuSurprise Sur.Pos")], na.rm = TRUE),
hi.neu.sur_n_MAD = mean(MAD[which(cond.full == "HiNeuSurprise Sur.Neg")], na.rm = TRUE),
hi.neu.sur_p_MAD = mean(MAD[which(cond.full == "HiNeuSurprise Sur.Pos")], na.rm = TRUE),
lo.emo.ang_RTz = mean(RTz[which(cond.load == "LoEmoAngry")], na.rm = TRUE),
hi.emo.ang_RTz = mean(RTz[which(cond.load == "HiEmoAngry")], na.rm = TRUE),
lo.neu.ang_RTz = mean(RTz[which(cond.load == "LoNeuAngry")], na.rm = TRUE),
hi.neu.ang_RTz = mean(RTz[which(cond.load == "HiNeuAngry")], na.rm = TRUE),
lo.emo.hap_RTz = mean(RTz[which(cond.load == "LoEmoHappy")], na.rm = TRUE),
hi.emo.hap_RTz = mean(RTz[which(cond.load == "HiEmoHappy")], na.rm = TRUE),
lo.neu.hap_RTz = mean(RTz[which(cond.load == "LoNeuHappy")], na.rm = TRUE),
hi.neu.hap_RTz = mean(RTz[which(cond.load == "HiNeuHappy")], na.rm = TRUE),
lo.emo.sur_p_RTz = mean(RTz[which(cond.full == "LoEmoSurprise Sur.Pos")], na.rm = TRUE),
hi.emo.sur_p_RTz = mean(RTz[which(cond.full == "HiEmoSurprise Sur.Pos")], na.rm = TRUE),
lo.neu.sur_p_RTz = mean(RTz[which(cond.full == "LoNeuSurprise Sur.Pos")], na.rm = TRUE),
hi.neu.sur_p_RTz = mean(RTz[which(cond.full == "HiNeuSurprise Sur.Pos")], na.rm = TRUE),
lo.emo.sur_n_RTz = mean(RTz[which(cond.full == "LoEmoSurprise Sur.Neg")], na.rm = TRUE),
hi.emo.sur_n_RTz = mean(RTz[which(cond.full == "HiEmoSurprise Sur.Neg")], na.rm = TRUE),
lo.neu.sur_n_RTz = mean(RTz[which(cond.full == "LoNeuSurprise Sur.Neg")], na.rm = TRUE),
hi.neu.sur_n_RTz = mean(RTz[which(cond.full == "HiNeuSurprise Sur.Neg")], na.rm = TRUE),
lo.emo.sur_RTz = mean(RTz[which(cond.load == "LoEmoSurprise")], na.rm = TRUE),
hi.emo.sur_RTz = mean(RTz[which(cond.load == "HiEmoSurprise")], na.rm = TRUE),
lo.neu.sur_RTz = mean(RTz[which(cond.load == "LoNeuSurprise")], na.rm = TRUE),
hi.neu.sur_RTz = mean(RTz[which(cond.load == "HiNeuSurprise")], na.rm = TRUE),
lo.neu.RTz = mean(RTz[which(factor == "NEU LOW" & trialtype == "face")], na.rm = TRUE),
hi.neu.RTz = mean(RTz[which(factor == "NEU HIGH" & trialtype == "face")], na.rm = TRUE),
lo.emo.RTz = mean(RTz[which(factor == "EMO LOW" & trialtype == "face")], na.rm = TRUE),
hi.emo.RTz = mean(RTz[which(factor == "EMO HIGH" & trialtype == "face")], na.rm = TRUE)))
dem <- read.csv("Data/qualtrics_data_20190607.csv")
questions <- c("Q2", "Q3", "Q4", "Q5", "Q6",
"Q7", "Q8", "Q9", "Q12")
dem <- dem[, c(questions)]
names(dem) <- c("subjID", "age", "sex", "race", "ethn", "psych", "neuro", "meds", "birthdate")
dem <- dem[-c(1:2),]
### wrong sub # or no sub # entered ###
rownames(dem) = NULL
dem$subjID <- as.character(dem$subjID)
dem[56,1] <- "71056"
dem[25,1] <- "71025"
dem[38,1] <- "71039"
MT.data.rating.table2 <- merge(MT.data.rating.table2, dem, by = "subjID")
write.csv(MT.data.rating.table2, paste("Data/Cleaned_Data/Final.Data.csv",format(Sys.time(),'_%Y-%m-%d_%H-%M-%S'),
'.csv',sep = ''))
data <- read.csv("~/Documents/Nick-Grad/Neta_Lab/depletion_study/study2/Analyses/WorkingMemoryLoads/Data/Cleaned_Data/Final.Data.csv_2019-09-06_12-18-56.csv")
View(data)
count(MT.data.rating.table2, sex = "Female")
count(MT.data.rating.table2, sex = "Female")
count(MT.data.rating.table2, sex == "Female")
count(MT.data.rating.table2, MT.data.rating.table2$sex == "Female")
?count
plyr::count(MT.data.rating.table2, MT.data.rating.table2$sex == "Female")
MT.data.rating.table2 %>% group_by(sex) %>% tally()
MT.data.rating.table2 %>% group_by(sex) %>% count("Female")
MT.data.rating.table2 %>% group_by(sex) %>% count(Female)
MT.data.rating.table2 %>% group_by(sex) %>% tally(Female)
MT.data.rating.table2 %>% group_by(sex) %>% tally("Female")
View(MT.data.rating.table2)
View(MT.results2)
View(MT.data.rating.table2)
library("papaja")
### import z score updated function ###
source("~/Documents/Nick-Grad/Neta_Lab/depletion_study/study2/Analyses/WorkingMemoryLoads/wilcox_test.R")
### load necessary libraries ###
suppressPackageStartupMessages(library(readxl))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(openxlsx))
suppressPackageStartupMessages(library(Rmisc))
suppressPackageStartupMessages(library(broom))
data <- read.csv("~/Documents/Nick-Grad/Neta_Lab/depletion_study/study2/Analyses/WorkingMemoryLoads/Data/Cleaned_Data/Final.Data.csv_2019-09-06_12-18-56.csv")
### assess normality ###
shapiro.test(data$lo.neu.sur_rate) # non-normal
shapiro.test(data$hi.neu.sur_rate) # non-normal
shapiro.test(data$lo.emo.sur_rate) # non-normal
shapiro.test(data$hi.emo.sur_rate) # non-normal
### make data long ###
friedman.data <- gather(data, key = "Condition", value = "Percent Negative Ratings",
lo.neu.sur_rate, hi.neu.sur_rate, lo.emo.sur_rate, hi.emo.sur_rate)
### run Friedman's test and store results ###
friedman.results <- friedman.test(`Percent Negative Ratings` ~ Condition|subjID, data = friedman.data)
### Follow up wilcoxon tests ###
lo.emo.v.lo.neu <- wilcox_test(data$lo.emo.sur_rate, data$lo.neu.sur_rate, paired = TRUE, conf.int = TRUE)
### Follow up wilcoxon tests ###
lo.emo.v.lo.neu <- wilcox_test(data$lo.emo.sur_rate, data$lo.neu.sur_rate, paired = TRUE, conf.int = TRUE)
lo.emo.v.hi.neu <- wilcox_test(data$lo.emo.sur_rate, data$hi.neu.sur_rate, paired = TRUE, conf.int = TRUE)
lo.emo.v.hi.emo <- wilcox_test(data$lo.emo.sur_rate, data$hi.emo.sur_rate, paired = TRUE, conf.int = TRUE)
hi.emo.v.lo.neu <- wilcox_test(data$hi.emo.sur_rate, data$lo.neu.sur_rate, paired = TRUE, conf.int = TRUE)
hi.emo.v.hi.neu <- wilcox_test(data$hi.emo.sur_rate, data$hi.neu.sur_rate, paired = TRUE, conf.int = TRUE)
lo.neu.v.hi.neu <- wilcox_test(data$hi.neu.sur_rate, data$lo.neu.sur_rate, paired = TRUE, conf.int = TRUE)
ggplot(friedman.data, aes(Condition, `Percent Negative Ratings`, fill = as.factor(Condition))) +
geom_bar(stat = "summary", fun.y = "mean") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1)
friedman.data$Condition <- factor(friedman.data$Condition, levels = c("lo.emo.sur_rate", "hi.emo.sur_rate",
"lo.neu.sur_rate", "hi.neu.sur_rate"))
ggplot(friedman.data, aes(Condition, `Percent Negative Ratings`, fill = as.factor(Condition))) +
geom_bar(stat = "summary", fun.y = "mean") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1)
friedman.data$Condition <- recode(friedman.data$Condition, "lo.emo.sur_rate = Low Emotional; hi.emo.sur_rate = High Emotional;
lo.neu.sur_rate = Low Neutral; hi.neu.sur_rate = High Neutral")
friedman.data$Condition <- recode(friedman.data$Condition, "lo.emo.sur_rate" = "Low Emotional", "hi.emo.sur_rate" = "High Emotional",
"lo.neu.sur_rate" = "Low Neutral", "hi.neu.sur_rate" = "High Neutral")
ggplot(friedman.data, aes(Condition, `Percent Negative Ratings`, fill = as.factor(Condition))) +
geom_bar(stat = "summary", fun.y = "mean") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1)
ggplot(friedman.data, aes(Condition, `Percent Negative Ratings`, fill = Condition)) +
geom_bar(stat = "summary", fun.y = "mean") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1)
ggplot(friedman.data, aes(Condition, `Percent Negative Ratings`, fill = Condition)) +
geom_bar(stat = "summary", fun.y = "mean") +
scale_fill_manual(values = c("#0d7378", "#21e1eb", "#498526", "#65e01d")) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1)
ggplot(friedman.data, aes(Condition, Percent Negative Ratings, fill = Condition)) +
friedman.data$`Percent Negative Ratings` <- friedman.data$`Percent Negative Ratings` * 100
ggplot(friedman.data, aes(Condition, `Percent Negative Ratings`, fill = Condition)) +
geom_bar(stat = "summary", fun.y = "mean") +
scale_fill_manual(values = c("#0d7378", "#21e1eb", "#498526", "#65e01d")) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1)
ggplot(friedman.data, aes(Condition, `Percent Negative Ratings`, fill = Condition)) +
geom_bar(stat = "summary", fun.y = "mean") +
scale_fill_manual(values = c("#0d7378", "#21e1eb", "#498526", "#65e01d")) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1) +
expand_limits(y=c(0, 100))
ggplot(friedman.data, aes(Condition, `Percent Negative Ratings`, fill = Condition)) +
geom_bar(stat = "summary", fun.y = "mean") +
scale_fill_manual(values = c("#0d7378", "#21e1eb", "#498526", "#65e01d")) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1) +
expand_limits(y=c(0, 100)) +
geom_point()
ggplot(friedman.data, aes(Condition, `Percent Negative Ratings`, fill = Condition)) +
geom_bar(stat = "summary", fun.y = "mean") +
scale_fill_manual(values = c("#0d7378", "#21e1eb", "#498526", "#65e01d")) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1) +
expand_limits(y=c(0, 100)) +
geom_density()
ggplot(friedman.data, aes(Condition, `Percent Negative Ratings`, fill = Condition)) +
geom_bar(stat = "summary", fun.y = "mean") +
scale_fill_manual(values = c("#0d7378", "#21e1eb", "#498526", "#65e01d")) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1) +
expand_limits(y=c(0, 100)) +
geom_density(stat = "summary", fun.y = "mean")
ggplot(friedman.data, aes(Condition, `Percent Negative Ratings`, fill = Condition)) +
geom_bar(stat = "summary", fun.y = "mean") +
scale_fill_manual(values = c("#0d7378", "#21e1eb", "#498526", "#65e01d")) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1) +
expand_limits(y=c(0, 100)) +
geom_point()
ggplot(friedman.data, aes(Condition, `Percent Negative Ratings`, fill = Condition)) +
geom_bar(stat = "summary", fun.y = "mean") +
scale_fill_manual(values = c("#0d7378", "#21e1eb", "#498526", "#65e01d")) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1) +
expand_limits(y=c(0, 100)) +
geom_jitter()
ggplot(friedman.data, aes(Condition, `Percent Negative Ratings`, fill = Condition)) +
geom_bar(stat = "summary", fun.y = "mean") +
scale_fill_manual(values = c("#0d7378", "#21e1eb", "#498526", "#65e01d")) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1) +
expand_limits(y=c(0, 100)) +
geom_jitter(aes(group = Condition))
ggplot(friedman.data, aes(Condition, `Percent Negative Ratings`, fill = Condition)) +
geom_bar(stat = "summary", fun.y = "mean") +
scale_fill_manual(values = c("#0d7378", "#21e1eb", "#498526", "#65e01d")) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1) +
expand_limits(y=c(0, 100)) +
geom_point(aes(group = Condition))
ggplot(friedman.data, aes(Condition, `Percent Negative Ratings`, fill = Condition)) +
geom_bar(stat = "summary", fun.y = "mean") +
scale_fill_manual(values = c("#0d7378", "#21e1eb", "#498526", "#65e01d")) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1) +
expand_limits(y=c(0, 100))
ggplot(friedman.data, aes(Condition, `Percent Negative Ratings`, fill = Condition)) +
geom_bar(stat = "summary", fun.y = "mean") +
scale_fill_manual(values = c("#0d7378", "#21e1eb", "#498526", "#65e01d")) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1) +
expand_limits(y=c(0, 100)) +
theme_apa()
ggplot(friedman.data, aes(Condition, `Percent Negative Ratings`, fill = Condition)) +
geom_bar(stat = "summary", fun.y = "mean") +
scale_fill_manual(values = c("#0d7378", "#21e1eb", "#498526", "#65e01d")) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1) +
expand_limits(y=c(0, 100)) +
geom_line(aes(group = subjID), colour = "blue") +
theme_apa()
ggplot(friedman.data, aes(Condition, `Percent Negative Ratings`, fill = Condition)) +
geom_bar(stat = "summary", fun.y = "mean") +
scale_fill_manual(values = c("#0d7378", "#21e1eb", "#498526", "#65e01d")) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1) +
expand_limits(y=c(0, 100)) +
geom_line(aes(group = subjID), colour = factor(subjID)) +
theme_apa()
ggplot(friedman.data, aes(Condition, `Percent Negative Ratings`, fill = Condition)) +
geom_bar(stat = "summary", fun.y = "mean") +
scale_fill_manual(values = c("#0d7378", "#21e1eb", "#498526", "#65e01d")) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1) +
expand_limits(y=c(0, 100)) +
geom_line(aes(group = subjID), colour = group(subjID)) +
theme_apa()
ggplot(friedman.data, aes(Condition, `Percent Negative Ratings`, fill = Condition)) +
geom_bar(stat = "summary", fun.y = "mean") +
scale_fill_manual(values = c("#0d7378", "#21e1eb", "#498526", "#65e01d")) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1) +
expand_limits(y=c(0, 100)) +
geom_line(aes(group = subjID), colour = subjID) +
theme_apa()
ggplot(friedman.data, aes(Condition, `Percent Negative Ratings`, fill = Condition)) +
geom_bar(stat = "summary", fun.y = "mean") +
scale_fill_manual(values = c("#0d7378", "#21e1eb", "#498526", "#65e01d")) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1) +
expand_limits(y=c(0, 100)) +
theme_apa()
MAD.long <- gather(data, key = "Condition", value = "MAD",
lo.emo.sur_MAD, hi.emo.sur_MAD, lo.neu.sur_MAD, hi.neu.sur_MAD)
MAD.long$load <- ifelse(MAD.long$Condition == "lo.emo.sur_MAD", "Low",
ifelse(MAD.long$Condition == "lo.neu.sur_MAD", "Low", "High"))
MAD.long$type <- ifelse(MAD.long$Condition == "lo.emo.sur_MAD", "Emo",
ifelse(MAD.long$Condition == "hi.emo.sur_MAD", "Emo", "Neu"))
MAD.anova <- aov(MAD ~ load * type, data = MAD.long)
summary.aov(MAD.anova)
MAD.anova <- tidy(MAD.anova)
summary.aov(MAD.anova)
MAD.anova <- aov(MAD ~ load * type, data = MAD.long)
summary.aov(MAD.anova)
MAD.anova <- tidy(MAD.anova)
ggplot(MAD.long, aes(Condition, MAD, fill = as.factor(Condition))) +
geom_bar(stat = "summary", fun.y = "mean") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1) +
scale_fill_manual(values = c("#0d7378", "#21e1eb", "#498526", "#65e01d")) +
theme_apa
ggplot(MAD.long, aes(Condition, MAD, fill = as.factor(Condition))) +
geom_bar(stat = "summary", fun.y = "mean") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1) +
scale_fill_manual(values = c("#0d7378", "#21e1eb", "#498526", "#65e01d")) +
theme_apa()
friedman.data$Condition <- factor(friedman.data$Condition, levels = c("lo.emo.sur_MAD", "hi.emo.sur_MAD",
"lo.neu.sur_MAD", "hi.neu.sur_MAD"))
friedman.data$Condition <- recode(friedman.data$Condition, "lo.emo.sur_MAD" = "Low Emotional", "hi.emo.sur_MAD" = "High Emotional",
"lo.neu.sur_MAD" = "Low Neutral", "hi.neu.sur_MAD" = "High Neutral")
ggplot(MAD.long, aes(Condition, MAD, fill = as.factor(Condition))) +
geom_bar(stat = "summary", fun.y = "mean") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1) +
scale_fill_manual(values = c("#0d7378", "#21e1eb", "#498526", "#65e01d")) +
theme_apa()
MAD.long$Condition <- factor(MAD.long$Condition, levels = c("lo.emo.sur_MAD", "hi.emo.sur_MAD",
"lo.neu.sur_MAD", "hi.neu.sur_MAD"))
MAD.long$Condition <- recode(MAD.long$Condition, "lo.emo.sur_MAD" = "Low Emotional", "hi.emo.sur_MAD" = "High Emotional",
"lo.neu.sur_MAD" = "Low Neutral", "hi.neu.sur_MAD" = "High Neutral")
ggplot(MAD.long, aes(Condition, MAD, fill = as.factor(Condition))) +
geom_bar(stat = "summary", fun.y = "mean") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1) +
scale_fill_manual(values = c("#0d7378", "#21e1eb", "#498526", "#65e01d")) +
theme_apa()
ggplot(MAD.long, aes(Condition, MAD, fill = as.factor(Condition))) +
geom_bar(stat = "summary", fun.y = "mean") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1) +
scale_fill_manual(values = c("#0d7378", "#21e1eb", "#498526", "#65e01d")) +
theme_apa() +
geom_line
ggplot(MAD.long, aes(Condition, MAD, fill = as.factor(Condition))) +
geom_bar(stat = "summary", fun.y = "mean") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1) +
scale_fill_manual(values = c("#0d7378", "#21e1eb", "#498526", "#65e01d")) +
theme_apa() +
geom_line(group(subjID))
ggplot(MAD.long, aes(Condition, MAD, fill = as.factor(Condition))) +
geom_bar(stat = "summary", fun.y = "mean") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1) +
scale_fill_manual(values = c("#0d7378", "#21e1eb", "#498526", "#65e01d")) +
theme_apa() +
geom_line(aes(group(subjID)))
ggplot(MAD.long, aes(Condition, MAD, fill = as.factor(Condition))) +
geom_bar(stat = "summary", fun.y = "mean") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1) +
scale_fill_manual(values = c("#0d7378", "#21e1eb", "#498526", "#65e01d")) +
theme_apa()
ggplot(MAD.long, aes(Condition, MAD, fill = Condition)) +
geom_bar(stat = "summary", fun.y = "mean") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1) +
scale_fill_manual(values = c("#0d7378", "#21e1eb", "#498526", "#65e01d")) +
theme_apa()
ggplot(friedman.data, aes(Condition, `Percent Negative Ratings`, fill = Condition)) +
geom_bar(stat = "summary", fun.y = "mean") +
scale_fill_manual(values = c("#0d7378", "#21e1eb", "#498526", "#65e01d")) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1) +
expand_limits(y=c(0, 100)) +
theme_apa(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(friedman.data, aes(Condition, `Percent Negative Ratings`, fill = Condition)) +
geom_bar(stat = "summary", fun.y = "mean") +
scale_fill_manual(values = c("#0d7378", "#21e1eb", "#498526", "#65e01d")) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1) +
expand_limits(y=c(0, 100)) +
theme_apa() +
axis.title.x=element_blank() +
axis.text.x=element_blank() +
axis.ticks.x=element_blank()
ggplot(friedman.data, aes(Condition, `Percent Negative Ratings`, fill = Condition)) +
geom_bar(stat = "summary", fun.y = "mean") +
scale_fill_manual(values = c("#0d7378", "#21e1eb", "#498526", "#65e01d")) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1) +
expand_limits(y=c(0, 100)) +
theme(axis.text.x=element_blank()) +
theme_apa()
ggplot(friedman.data, aes(Condition, `Percent Negative Ratings`, fill = Condition)) +
geom_bar(stat = "summary", fun.y = "mean") +
scale_fill_manual(values = c("#0d7378", "#21e1eb", "#498526", "#65e01d")) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1) +
expand_limits(y=c(0, 100)) +
theme_apa()
ggplot(MAD.long, aes(Condition, MAD, fill = Condition)) +
geom_bar(stat = "summary", fun.y = "mean") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1) +
scale_fill_manual(values = c("#0d7378", "#21e1eb", "#498526", "#65e01d")) +
theme(axis.text.x=element_blank()) +
theme_apa()
ggplot(MAD.long, aes(Condition, MAD, fill = Condition)) +
geom_bar(stat = "summary", fun.y = "mean") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .1) +
scale_fill_manual(values = c("#0d7378", "#21e1eb", "#498526", "#65e01d")) +
theme_apa() +
theme(axis.text.x=element_blank())
library("papaja")
data <- read.csv("~/Documents/Nick-Grad/Neta_Lab/depletion_study/study2/Analyses/WorkingMemoryLoads/Data/Cleaned_Data/Final.Data.csv_2019-09-06_12-18-56.csv")
2 < 9
2 > 9
View(data)
young <- subset(data, age =< 18)
young <- subset(data, age <= 18)
old <- subset(data, age >= 19)
data$agegroup <- ifelse(data$age <=18, "young", "old")
View(data)
